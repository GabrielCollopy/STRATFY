@model STRATFY.Models.ExtratoEdicaoViewModel

@{
    ViewData["Title"] = "Editar Extrato";
    var categorias = ViewData["CategoriaId"] as SelectList;
    var tipos = new List<SelectListItem>
    {
        new SelectListItem { Value = "Selecione o tipo", Text = "Selecione o tipo" },
        new SelectListItem { Value = "Débito", Text = "Débito" },
        new SelectListItem { Value = "Crédito", Text = "Crédito" },
        new SelectListItem { Value = "Dinheiro", Text = "Dinheiro" },
        new SelectListItem { Value = "Pix", Text = "Pix" }
    };
}

<div class="d-flex justify-content-center align-items-center" style="min-height: 90vh;">
    <div class="editar_extrato">
        <h2 class="text-center mb-4">Editar Extrato</h2>

        <form asp-action="Edit" method="post">
            <input type="hidden" asp-for="ExtratoId" />

            <div class="mb-3">
                <label asp-for="NomeExtrato" class="form-label">Nome do Extrato</label>
                <input asp-for="NomeExtrato" class="form-control rounded-3" />
                <span asp-validation-for="NomeExtrato" class="text-warning"></span>
            </div>

            <h4 class="text-center">Movimentações</h4>

            <!-- Busca e filtros -->
            <div class="row mb-3 align-items-center">
                <div class="col-md-4">
                    <input type="text" id="searchInput" class="form-control rounded-3" placeholder="Buscar movimentações..." />
                </div>
                <div class="col-md-4">
                    <select id="filterTipo" class="form-control rounded-3">
                        <option value="">Todos os Tipos</option>
                        <option value="Débito">Débito</option>
                        <option value="Crédito">Crédito</option>
                        <option value="Dinheiro">Dinheiro</option>
                        <option value="Pix">Pix</option>
                    </select>
                </div>
                <div class="col-md-4 text-end">
                    <button id="btnAdicionar" type="button" class="btn btn-light rounded-pill" onclick="adicionarLinha()">+ Adicionar Movimentação</button>
                </div>
            </div>

            <div class="table-responsive rounded" style="background-color: white; color: black; padding: 0.5rem; border-radius: 16px; overflow-x: auto;">
                <table class="table table-bordered align-middle mb-0" id="movimentacoes-table" style="width: 100%;">
                    <datalist id="categorias-lista">
                        @foreach (var categoria in categorias)
                        {
                            <option value="@categoria.Text"></option>
                        }
                    </datalist>

                    <thead class="table-light">
                        <tr>
                            <th>Descrição</th>
                            <th>Valor
                                <i class="bi bi-info-circle" data-bs-toggle="tooltip" data-bs-placement="top"
                                   title="Use valores positivos para entradas e negativos (-) para saídas de dinheiro"></i>
                            </th>
                            <th>Tipo</th>
                            <th>Categoria</th>
                            <th>Data</th>
                            <th>Ações</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.Movimentacoes.Count; i++)
                        {
                            <tr class="movimentacao-row">
                                <input type="hidden" name="Movimentacoes[@i].Id" value="@Model.Movimentacoes[i].Id" />
                                <input type="hidden" name="Movimentacoes[@i].ExtratoId" value="@Model.ExtratoId" />

                                <td><input class="form-control rounded-3 searchable-field" name="Movimentacoes[@i].Descricao" value="@Model.Movimentacoes[i].Descricao" /></td>
                                <td>
                                    <input class="form-control rounded-3" name="Movimentacoes[@i].Valor" value="@Model.Movimentacoes[i].Valor" />
                                    </td>
                                <td>
                                    <select name="Movimentacoes[@i].Tipo" class="form-control rounded-3 tipo-field">
                                        @foreach (var item in tipos)
                                        {
                                            <option value="@item.Value" selected="@(item.Value == Model.Movimentacoes[i].Tipo)">
                                                @item.Text
                                            </option>
                                        }
                                    </select>
                                </td>
                                <td>
                                    <select name="Movimentacoes[@i].Categoria.Id" class="form-control rounded-3 categoria-select">
                                        <option value="">Selecione a Categoria</option>
                                        @foreach (var categoria in categorias)
                                        {
                                            <option value="@categoria.Value" selected="@(categoria.Value == Model.Movimentacoes[i].Categoria.Id.ToString())">
                                                @categoria.Text
                                            </option>
                                        }
                                    </select>
                                </td>

                                <td>
                                    <input class="form-control rounded-3" type="date" name="Movimentacoes[@i].DataMovimentacao"
                                           value="@Model.Movimentacoes[i].DataMovimentacao?.ToString("yyyy-MM-dd")" />
                                </td>
                                <td>
                                    <button type="button" class="btn btn-outline-danger btn-sm" onclick="removerLinha(this)">Remover</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                <!-- Paginação -->
                <div class="d-flex justify-content-between align-items-center mt-3">
                    <div>
                        <span id="info-paginacao">Exibindo <span id="inicio-registros">1</span>-<span id="fim-registros">10</span> de <span id="total-registros">0</span> registros</span>
                    </div>
                    <div>
                        <label for="registrosPorPagina">Registros por página:</label>
                        <select id="registrosPorPagina" class="form-select-sm ms-2">
                            <option value="5">5</option>
                            <option value="10" selected>10</option>
                            <option value="25">25</option>
                            <option value="50">50</option>
                        </select>
                    </div>
                    <div>
                        <nav aria-label="Navegação de páginas">
                            <ul class="pagination pagination-sm mb-0">
                                <li class="page-item disabled" id="btn-primeira">
                                    <a class="page-link" href="#" aria-label="Primeira">
                                        <span aria-hidden="true">&laquo;&laquo;</span>
                                    </a>
                                </li>
                                <li class="page-item disabled" id="btn-anterior">
                                    <a class="page-link" href="#" aria-label="Anterior">
                                        <span aria-hidden="true">&laquo;</span>
                                    </a>
                                </li>
                                <li class="page-item active"><a class="page-link" href="#">1</a></li>
                                <!-- Páginas dinâmicas serão adicionadas via JavaScript -->
                                <li class="page-item" id="btn-proxima">
                                    <a class="page-link" href="#" aria-label="Próxima">
                                        <span aria-hidden="true">&raquo;</span>
                                    </a>
                                </li>
                                <li class="page-item" id="btn-ultima">
                                    <a class="page-link" href="#" aria-label="Última">
                                        <span aria-hidden="true">&raquo;&raquo;</span>
                                    </a>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>

            <div class="d-flex justify-content-between mt-4">
                <a asp-action="Index" class="btn btn-light rounded-pill">Voltar</a>
                <button type="submit" class="btn btn-light rounded-pill">Salvar Alterações</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        let categoriasDoBanco = [
        @foreach (var item in categorias)
        {
            <text>{ value: "@item.Value", text: "@item.Text" }, </text>
        }
                ];
        // Variáveis de controle da paginação
        let paginaAtual = 1;
        let registrosPorPagina = 10;
        let totalPaginas = 1;
        let indice = 0; // Será inicializado com o valor correto no ready

        $(document).ready(function() {
            // Inicializar o contador com o número atual de linhas
            indice = $('.movimentacao-row').length;

            // Configurar a paginação inicial
            atualizarPaginacao();

            // Eventos de paginação
            $("#registrosPorPagina").change(function() {
                registrosPorPagina = parseInt($(this).val());
                paginaAtual = 1; // Voltar para a primeira página
                atualizarPaginacao();
            });

            // Eventos de busca e filtro
            $("#searchInput").on("keyup", function() {
                paginaAtual = 1; // Voltar para a primeira página ao buscar
                atualizarPaginacao();
            });

            $("#filterTipo").change(function() {
                paginaAtual = 1; // Voltar para a primeira página ao filtrar
                atualizarPaginacao();
            });

            // Eventos de navegação
            $("#btn-primeira").click(function(e) {
                e.preventDefault();
                if (!$(this).hasClass("disabled")) {
                    paginaAtual = 1;
                    atualizarPaginacao();
                }
            });

            $("#btn-anterior").click(function(e) {
                e.preventDefault();
                if (!$(this).hasClass("disabled")) {
                    paginaAtual--;
                    atualizarPaginacao();
                }
            });

            $("#btn-proxima").click(function(e) {
                e.preventDefault();
                if (!$(this).hasClass("disabled")) {
                    paginaAtual++;
                    atualizarPaginacao();
                }
            });

            $("#btn-ultima").click(function(e) {
                e.preventDefault();
                if (!$(this).hasClass("disabled")) {
                    paginaAtual = totalPaginas;
                    atualizarPaginacao();
                }
            });
        });

        // Função para remover linha
        function removerLinha(botao) {
            const linha = $(botao).closest('tr');
            linha.remove();
            reindexarTabela();
            atualizarPaginacao();
        }

        // Função para reindexar os campos do formulário
        function reindexarTabela() {
            const linhas = $('.movimentacao-row');
            linhas.each(function(index) {
                $(this).find('input, select').each(function() {
                    const name = $(this).attr('name');
                    if (name) {
                        const novoName = name.replace(/Movimentacoes\[\d+\]/, `Movimentacoes[${index}]`);
                        $(this).attr('name', novoName);
                    }
                });
            });

            // Atualizar o índice global para novas linhas
            indice = linhas.length;
        }

        // Função para adicionar nova linha
        function adicionarLinha() {
            const tbody = $('#movimentacoes-table tbody');
            const extratoId = $('#ExtratoId').val();

            // Construir as opções de categoria
            let optionsHtml = '<option value="">Selecione a Categoria</option>';
            categoriasDoBanco.forEach(categoria => {
                optionsHtml += `<option value="${categoria.value}">${categoria.text}</option>`;
            });

            // Construir as opções de tipo
            let tiposHtml = `
                <option value="Selecione o tipo">Selecione o tipo</option>
                <option value="Débito">Débito</option>
                <option value="Crédito">Crédito</option>
                <option value="Dinheiro">Dinheiro</option>
                <option value="Pix">Pix</option>
            `;

            const novaLinha = `
                <tr class="movimentacao-row">
                    <input type="hidden" name="Movimentacoes[${indice}].Id" value="0" />
                    <input type="hidden" name="Movimentacoes[${indice}].ExtratoId" value="${extratoId}" />
                    <td><input class="form-control rounded-3 searchable-field" name="Movimentacoes[${indice}].Descricao" /></td>
                    <td><input class="form-control rounded-3" name="Movimentacoes[${indice}].Valor" /></td>
                    <td>
                        <select class="form-control rounded-3 tipo-field" name="Movimentacoes[${indice}].Tipo">
                            ${tiposHtml}
                        </select>
                    </td>
                    <td>
                        <select class="form-control rounded-3 categoria-select" name="Movimentacoes[${indice}].Categoria.Id">
                            ${optionsHtml}
                        </select>
                    </td>
                    <td><input class="form-control rounded-3" type="date" name="Movimentacoes[${indice}].DataMovimentacao" /></td>
                    <td><button type="button" class="btn btn-outline-danger btn-sm" onclick="removerLinha(this)">Remover</button></td>
                </tr>
            `;

            tbody.append(novaLinha);
            indice++;
            totalPaginas = Math.ceil($('.movimentacao-row').length / registrosPorPagina);
            paginaAtual = totalPaginas;
            atualizarPaginacao();
            tbody.find('tr:last-child td:first-child input').focus();
        }

        // Função para atualizar a paginação
        function atualizarPaginacao() {
            // Aplicar filtros para determinar quais linhas devem ser visíveis
            aplicarFiltros();

            // Obter todas as linhas que passaram pelos filtros
            const linhasFiltradas = $(".movimentacao-row.filtrado");
            const totalRegistros = linhasFiltradas.length;

            // Calcular total de páginas
            totalPaginas = Math.ceil(totalRegistros / registrosPorPagina);
            if (totalPaginas === 0) totalPaginas = 1;

            // Ajustar página atual se necessário
            if (paginaAtual > totalPaginas) {
                paginaAtual = totalPaginas;
            }

            // Esconder todas as linhas primeiro
            $(".movimentacao-row").hide();

            // Mostrar apenas as linhas filtradas da página atual
            const inicio = (paginaAtual - 1) * registrosPorPagina;
            const fim = inicio + registrosPorPagina;

            linhasFiltradas.slice(inicio, fim).show();

            // Atualizar informações de paginação
            $("#total-registros").text(totalRegistros);
            $("#inicio-registros").text(totalRegistros > 0 ? inicio + 1 : 0);
            $("#fim-registros").text(Math.min(fim, totalRegistros));

            // Atualizar estado dos botões de navegação
            $("#btn-primeira, #btn-anterior").toggleClass("disabled", paginaAtual === 1);
            $("#btn-proxima, #btn-ultima").toggleClass("disabled", paginaAtual === totalPaginas);

            // Atualizar números de página
            atualizarNumerosPagina();
        }

        // Função para aplicar filtros e marcar linhas filtradas
        function aplicarFiltros() {
            const termoBusca = $("#searchInput").val().toLowerCase();
            const tipoFiltro = $("#filterTipo").val();

            // Remover classe de filtro anterior
            $(".movimentacao-row").removeClass("filtrado");

            // Aplicar filtros
            $(".movimentacao-row").each(function() {
                const linha = $(this);
                let mostrar = true;

                // Aplicar filtro de busca
                if (termoBusca) {
                    const textoLinha = linha.find(".searchable-field").map(function() {
                        return $(this).val() ? $(this).val().toLowerCase() : "";
                    }).get().join(" ");

                    if (!textoLinha.includes(termoBusca)) {
                        mostrar = false;
                    }
                }

                // Aplicar filtro por tipo
                if (tipoFiltro && mostrar) {
                    const tipoValor = linha.find(".tipo-field").val();

                    if (tipoValor !== tipoFiltro) {
                        mostrar = false;
                    }
                }

                // Marcar linha como filtrada se passou pelos filtros
                if (mostrar) {
                    linha.addClass("filtrado");
                }
            });
        }

        // Função para atualizar os números de páginas na paginação
        function atualizarNumerosPagina() {
            // Remover páginas existentes, exceto os botões de navegação
            $(".page-item:not(#btn-primeira):not(#btn-anterior):not(#btn-proxima):not(#btn-ultima)").remove();

            // Se tiver apenas uma página, mostrar só ela
            if (totalPaginas <= 1) {
                const pageItem = $(`<li class="page-item active"><a class="page-link" href="#">1</a></li>`);
                pageItem.insertBefore($("#btn-proxima"));
                return;
            }

            // Determinar quantas páginas mostrar (máximo 5)
            let inicioRange = Math.max(1, paginaAtual - 2);
            let fimRange = Math.min(totalPaginas, inicioRange + 4);

            // Ajustar para sempre mostrar 5 páginas quando possível
            if (fimRange - inicioRange < 4 && totalPaginas > 4) {
                inicioRange = Math.max(1, fimRange - 4);
            }

            // Inserir antes do botão próxima
            for (let i = inicioRange; i <= fimRange; i++) {
                const active = i === paginaAtual ? "active" : "";
                const pageItem = $(`<li class="page-item ${active}"><a class="page-link" href="#">${i}</a></li>`);

                pageItem.insertBefore($("#btn-proxima"));

                // Adicionar evento de clique
                pageItem.click(function(e) {
                    e.preventDefault();
                    paginaAtual = i;
                    atualizarPaginacao();
                });
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            // Configurar todos os seletores de categoria
            document.querySelectorAll('.categoria-input').forEach(input => {
                const container = input.closest('.categoria-select-container');
                const dropdown = container.querySelector('.categoria-dropdown');
                const options = Array.from(dropdown.querySelectorAll('.categoria-option'));

                // Função para mostrar o dropdown
                function showDropdown() {
                    dropdown.classList.add('show');
                }

                // Função para esconder o dropdown
                function hideDropdown() {
                    // Pequeno atraso para permitir a seleção de opções
                    setTimeout(() => {
                        dropdown.classList.remove('show');
                    }, 150);
                }

                // Função para filtrar opções
                function filterOptions() {
                    const filterValue = input.value.toLowerCase();
                    let hasVisibleOptions = false;

                    options.forEach(option => {
                        const text = option.textContent.toLowerCase();
                        if (text.includes(filterValue)) {
                            option.style.display = 'block';
                            hasVisibleOptions = true;
                        } else {
                            option.style.display = 'none';
                        }
                    });

                    return hasVisibleOptions;
                }

                // Evento de foco no input
                input.addEventListener('focus', () => {
                    showDropdown();
                    filterOptions();
                });

                // Evento de perda de foco
                input.addEventListener('blur', hideDropdown);

                // Evento de digitação
                input.addEventListener('input', filterOptions);

                // Clique em uma opção
                options.forEach(option => {
                    option.addEventListener('mousedown', (e) => {
                        // Evitar fechamento do dropdown pelo evento blur
                        e.preventDefault();
                        input.value = option.textContent;
                        hideDropdown();
                    });
                });

                // Navegação com teclado
                input.addEventListener('keydown', (e) => {
                    const visibleOptions = options.filter(opt => opt.style.display !== 'none');
                    let currentIndex = visibleOptions.findIndex(opt => opt.classList.contains('highlight'));

                    if (e.key === 'ArrowDown') {
                        e.preventDefault();
                        if (currentIndex < visibleOptions.length - 1) {
                            if (currentIndex >= 0) visibleOptions[currentIndex].classList.remove('highlight');
                            visibleOptions[currentIndex + 1].classList.add('highlight');
                        } else if (currentIndex === -1 && visibleOptions.length > 0) {
                            visibleOptions[0].classList.add('highlight');
                        }
                    } else if (e.key === 'ArrowUp') {
                        e.preventDefault();
                        if (currentIndex > 0) {
                            visibleOptions[currentIndex].classList.remove('highlight');
                            visibleOptions[currentIndex - 1].classList.add('highlight');
                        }
                    } else if (e.key === 'Enter' && currentIndex >= 0) {
                        e.preventDefault();
                        input.value = visibleOptions[currentIndex].textContent;
                        hideDropdown();
                    } else if (e.key === 'Escape') {
                        e.preventDefault();
                        hideDropdown();
                    }
                });
            });

            function validarFormulario() {
                let isValido = true;
                let mensagensErro = [];

                // Remover alertas anteriores
                $(".alert-validation").remove();

                // Validar cada linha de movimentação
                $('.movimentacao-row:not(.d-none)').each(function (index) {
                    const row = $(this);
                    const descricao = row.find('input[name$="Descricao"]').val();
                    const valor = row.find('input[name$="Valor"]').val();
                    const tipo = row.find('select[name$="Tipo"]').val();
                    const categoria = row.find('select[name$="Categoria.Id"]').val();
                    const data = row.find('input[name$="DataMovimentacao"]').val();

                    // Validar campos obrigatórios
                    if (!descricao || descricao.trim() === '') {
                        isValido = false;
                        row.find('input[name$="Descricao"]').addClass('is-invalid');
                        mensagensErro.push(`Linha ${index + 1}: Descrição é obrigatória`);
                    } else {
                        row.find('input[name$="Descricao"]').removeClass('is-invalid');
                    }

                    if (!valor || valor.trim() === '') {
                        isValido = false;
                        row.find('input[name$="Valor"]').addClass('is-invalid');
                        mensagensErro.push(`Linha ${index + 1}: Valor é obrigatório`);
                    } else {
                        row.find('input[name$="Valor"]').removeClass('is-invalid');
                    }

                    if (!tipo || tipo === 'Selecione o tipo') {
                        isValido = false;
                        row.find('select[name$="Tipo"]').addClass('is-invalid');
                        mensagensErro.push(`Linha ${index + 1}: Tipo é obrigatório`);
                    } else {
                        row.find('select[name$="Tipo"]').removeClass('is-invalid');
                    }

                    if (!categoria || categoria === '') {
                        isValido = false;
                        row.find('select[name$="Categoria.Id"]').addClass('is-invalid');
                        mensagensErro.push(`Linha ${index + 1}: Categoria é obrigatória`);
                    } else {
                        row.find('select[name$="Categoria.Id"]').removeClass('is-invalid');
                    }

                    if (!data || data.trim() === '') {
                        isValido = false;
                        row.find('input[name$="DataMovimentacao"]').addClass('is-invalid');
                        mensagensErro.push(`Linha ${index + 1}: Data é obrigatória`);
                    } else {
                        row.find('input[name$="DataMovimentacao"]').removeClass('is-invalid');
                    }
                });

                // Se houver erros, mostrar alerta
                if (!isValido) {
                    const alertHtml = `
                <div class="alert alert-danger alert-validation alert-dismissible fade show mt-3" role="alert">
                    <strong>Atenção!</strong> Por favor, corrija os seguintes erros:
                    <ul>
                        ${mensagensErro.map(msg => `<li>${msg}</li>`).join('')}
                    </ul>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
                `;

                    // Usar um seletor específico para o container do formulário principal
                    $('.editar_extrato form').prepend(alertHtml);
                    $('html, body').animate({ scrollTop: 0 }, 'slow');
                }

                return isValido;
            }
        $('form').on('submit', function (event) {
            if (!validarFormulario()) {
                event.preventDefault();
                return false;
            }
            return true;
        });

        });
    </script>
}