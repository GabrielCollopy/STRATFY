@model STRATFY.Models.ExtratoEdicaoViewModel

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
</head>

@{
    ViewData["Title"] = "Editar Extrato";
    var categorias = ViewData["CategoriaId"] as SelectList;

    // A lista de tipos permanece aqui, mas a primeira opção com value="" é adicionada diretamente no HTML.
    var tipos = new List<SelectListItem>
    {
        new SelectListItem { Value = "Débito", Text = "Débito" },
        new SelectListItem { Value = "Crédito", Text = "Crédito" },
        new SelectListItem { Value = "Dinheiro", Text = "Dinheiro" },
        new SelectListItem { Value = "Pix", Text = "Pix" }
    };
}

<div class="d-flex justify-content-center align-items-center" style="min-height: 90vh; min-width:100%;">
    <div class="editar_extrato">
        <h2 class="text-center mb-4">Editar Extrato</h2>

        <form asp-action="Edit" method="post">
            <input type="hidden" asp-for="ExtratoId" />

            <div class="mb-3">
                <label asp-for="NomeExtrato" class="form-label">Nome do Extrato</label>
                <input asp-for="NomeExtrato" class="form-control rounded-3" />
                <span asp-validation-for="NomeExtrato" class="text-warning"></span>
            </div>

            <h4 class="text-center">Movimentações</h4>

            <div class="row mb-3 align-items-center">
                <div class="col-md-4">
                    <input type="text" id="searchInput" class="form-control rounded-3" placeholder="Buscar movimentações..." />
                </div>
                <div class="col-md-4">
                    <select id="filterTipo" class="form-control rounded-3">
                        <option value="">Todos os Tipos</option>
                        <option value="Débito">Débito</option>
                        <option value="Crédito">Crédito</option>
                        <option value="Dinheiro">Dinheiro</option>
                        <option value="Pix">Pix</option>
                    </select>
                </div>
                <div class="col-md-4 text-end">
                    <button id="btnAdicionar" type="button" class="btn btn-light rounded-pill" onclick="adicionarLinha()">+ Adicionar Movimentação</button>
                </div>
            </div>

            <div class="table-responsive rounded" style="background-color: white; color: black; padding: 0.5rem; border-radius: 16px; overflow-x: auto; min-width:fit-content;">
                <table class="table table-bordered align-middle mb-0" id="movimentacoes-table" style="width: 100%;">
                    <datalist id="categorias-lista">
                        @foreach (var categoria in categorias)
                        {
                            <option value="@categoria.Text.Trim()"></option> @* Adicionado .Trim() aqui para a datalist *@
                        }
                    </datalist>

                    <thead class="table-light">
                        <tr>
                            <th>Descrição</th>
                            <th>
                                Valor
                                <i class="bi bi-info-circle" data-bs-toggle="tooltip" data-bs-placement="top"
                                   title="Use valores positivos para entradas e negativos (-) para saídas de dinheiro"></i>
                            </th>
                            <th>Tipo</th>
                            <th>Categoria</th>
                            <th>Data</th>
                            <th>Ações</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.Movimentacoes.Count; i++)
                        {
                            <tr class="movimentacao-row">
                                <input type="hidden" name="Movimentacoes[@i].Id" value="@Model.Movimentacoes[i].Id" />
                                <input type="hidden" name="Movimentacoes[@i].ExtratoId" value="@Model.ExtratoId" />

                                <td><input class="form-control rounded-3 searchable-field" name="Movimentacoes[@i].Descricao" value="@Model.Movimentacoes[i].Descricao" /></td>
                                <td>
                                    <input class="form-control rounded-3" name="Movimentacoes[@i].Valor" value="@Model.Movimentacoes[i].Valor" />
                                </td>
                                <td>
                                    <select name="Movimentacoes[@i].Tipo" class="form-control rounded-3 tipo-field">
                                        <option value="">Selecione o tipo</option> @* Opção padrão com valor vazio *@
                                        @foreach (var item in tipos)
                                        {
                                            <option value="@item.Value" selected="@(item.Value == Model.Movimentacoes[i].Tipo)">
                                                @item.Text
                                            </option>
                                        }
                                    </select>
                                </td>
                                <td>
                                    <select name="Movimentacoes[@i].Categoria.Id" class="form-control rounded-3 categoria-select">
                                        <option value="">Selecione a Categoria</option> @* Opção padrão com valor vazio *@
                                        @foreach (var categoria in categorias)
                                        {
                                            <option value="@categoria.Value" selected="@(categoria.Value == Model.Movimentacoes[i].Categoria?.Id.ToString())">
                                                @categoria.Text
                                            </option>
                                        }
                                    </select>
                                    @* O Categoria.Nome é enviado apenas como um campo oculto para referência,
                                não é usado para criar novas categorias no back-end.
                                Ele é preenchido via JavaScript na seleção do dropdown. *@
                                    <input type="hidden" name="Movimentacoes[@i].Categoria.Nome"
                                           value="@(Model.Movimentacoes[i].Categoria?.Nome?.Trim())" @* Adicionado .Trim() aqui para o valor inicial *@
                                           class="categoria-nome-hidden" />
                                </td>

                                <td>
                                    <input class="form-control rounded-3" type="date" name="Movimentacoes[@i].DataMovimentacao"
                                           value="@Model.Movimentacoes[i].DataMovimentacao?.ToString("yyyy-MM-dd")" />
                                </td>
                                <td>
                                    <button type="button" class="btn btn-outline-danger btn-sm" onclick="removerLinha(this)">Remover</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                <div class="d-flex justify-content-between align-items-center mt-3">
                    <div>
                        <span id="info-paginacao">Exibindo <span id="inicio-registros">1</span>-<span id="fim-registros">10</span> de <span id="total-registros">0</span> registros</span>
                    </div>
                    <div>
                        <label for="registrosPorPagina">Registros por página:</label>
                        <select id="registrosPorPagina" class="form-select-sm ms-2">
                            <option value="5">5</option>
                            <option value="10" selected>10</option>
                            <option value="25">25</option>
                            <option value="50">50</option>
                        </select>
                    </div>
                    <div>
                        <nav aria-label="Navegação de páginas">
                            <ul class="pagination pagination-sm mb-0">
                                <li class="page-item disabled" id="btn-primeira">
                                    <a class="page-link" href="#" aria-label="Primeira">
                                        <span aria-hidden="true">&laquo;&laquo;</span>
                                    </a>
                                </li>
                                <li class="page-item disabled" id="btn-anterior">
                                    <a class="page-link" href="#" aria-label="Anterior">
                                        <span aria-hidden="true">&laquo;</span>
                                    </a>
                                </li>
                                <li class="page-item active"><a class="page-link" href="#">1</a></li>
                                <li class="page-item" id="btn-proxima">
                                    <a class="page-link" href="#" aria-label="Próxima">
                                        <span aria-hidden="true">&raquo;</span>
                                    </a>
                                </li>
                                <li class="page-item" id="btn-ultima">
                                    <a class="page-link" href="#" aria-label="Última">
                                        <span aria-hidden="true">&raquo;&raquo;</span>
                                    </a>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>

            <div class="d-flex justify-content-between mt-4">
                <a asp-action="Index" class="btn btn-light rounded-pill">Voltar</a>
                <button type="submit" class="btn btn-light rounded-pill">Salvar Alterações</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        // Carrega as categorias do banco de dados para uso no JavaScript
        // **IMPORTANTE**: Use .Trim() aqui para garantir que os nomes da categoria não tenham espaços extras
        let categoriasDoBanco = [
        @foreach (var item in categorias)
        {
            // Garantimos que o 'text' esteja trimado ao ser passado para o JS.
            <text>{ value: "@item.Value", text: "@item.Text.Trim()" }, </text>
            // <--- Adicionado .Trim() aqui
        }
                ];
        // Variáveis de controle da paginação
        let paginaAtual = 1;
        let registrosPorPagina = 10;
        let totalPaginas = 1;
        let indice = 0; // Será inicializado com o valor correto no ready

        $(document).ready(function () {
            // Inicializar o contador com o número atual de linhas
            indice = $('.movimentacao-row').length;

            // Inicializar tooltips do Bootstrap
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            });


            // Configurar a paginação inicial
            atualizarPaginacao();

            // Eventos de paginação
            $("#registrosPorPagina").change(function () {
                registrosPorPagina = parseInt($(this).val());
                paginaAtual = 1; // Voltar para a primeira página
                atualizarPaginacao();
            });

            // Eventos de busca e filtro
            $("#searchInput").on("keyup", function () {
                paginaAtual = 1; // Voltar para a primeira página ao buscar
                atualizarPaginacao();
            });

            $("#filterTipo").change(function () {
                paginaAtual = 1; // Voltar para a primeira página ao filtrar
                atualizarPaginacao();
            });

            // Eventos de navegação
            $("#btn-primeira").click(function (e) {
                e.preventDefault();
                if (!$(this).hasClass("disabled")) {
                    paginaAtual = 1;
                    atualizarPaginacao();
                }
            });

            $("#btn-anterior").click(function (e) {
                e.preventDefault();
                if (!$(this).hasClass("disabled")) {
                    paginaAtual--;
                    atualizarPaginacao();
                }
            });

            $("#btn-proxima").click(function (e) {
                e.preventDefault();
                if (!$(this).hasClass("disabled")) {
                    paginaAtual++;
                    atualizarPaginacao();
                }
            });

            $("#btn-ultima").click(function (e) {
                e.preventDefault();
                if (!$(this).hasClass("disabled")) {
                    paginaAtual = totalPaginas;
                    atualizarPaginacao();
                }
            });

            // Adicionar listener para os selects de categoria (delegação de evento)
            // Isso garante que o hidden field seja preenchido com o nome da categoria
            // ao carregar a página e sempre que um select existente ou novo é alterado.
            $(document).on('change', '.categoria-select', function () {
                // **CORREÇÃO PRINCIPAL AQUI**: Adicionado .trim() no texto selecionado.
                const selectedText = $(this).find('option:selected').text().trim(); // <--- Adicionado .trim() aqui
                // Encontra o input hidden dentro da mesma célula (td)
                $(this).closest('td').find('.categoria-nome-hidden').val(selectedText);
            });

            // Chamar o change para preencher os valores iniciais (se já houver movimentações)
            // Isso garante que o hidden field já tenha o valor trimado ao carregar a página.
            $('.categoria-select').trigger('change');
        });

        // Função para remover linha
        function removerLinha(botao) {
            const linha = $(botao).closest('tr');
            linha.remove();
            reindexarTabela();
            atualizarPaginacao();
        }

        // Função para reindexar os campos do formulário
        function reindexarTabela() {
            const linhas = $('.movimentacao-row');
            linhas.each(function (index) {
                $(this).find('input, select').each(function () {
                    const name = $(this).attr('name');
                    if (name) {
                        const novoName = name.replace(/Movimentacoes\[\d+\]/, `Movimentacoes[${index}]`);
                        $(this).attr('name', novoName);
                    }
                });
            });

            // Atualizar o índice global para novas linhas
            indice = linhas.length;
        }

        // Função para adicionar nova linha
        function adicionarLinha() {
            const tbody = $('#movimentacoes-table tbody');
            const extratoId = $('#ExtratoId').val();

            // Construir as opções de categoria
            let optionsHtml = '<option value="">Selecione a Categoria</option>';
            categoriasDoBanco.forEach(categoria => {
                // O .Trim() já foi aplicado na criação de categoriasDoBanco, mas é bom sempre lembrar que o dado deve estar limpo
                optionsHtml += `<option value="${categoria.value}">${categoria.text}</option>`;
            });

            // Construir as opções de tipo (ajustado para ter uma opção inicial vazia)
            let tiposHtml = `
                                        <option value="">Selecione o tipo</option>
                                        <option value="Débito">Débito</option>
                                        <option value="Crédito">Crédito</option>
                                        <option value="Dinheiro">Dinheiro</option>
                                        <option value="Pix">Pix</option>
                                    `;

            const novaLinha = `
                                        <tr class="movimentacao-row">
                                            <input type="hidden" name="Movimentacoes[${indice}].Id" value="0" />
                                            <input type="hidden" name="Movimentacoes[${indice}].ExtratoId" value="${extratoId}" />
                                            <td><input class="form-control rounded-3 searchable-field" name="Movimentacoes[${indice}].Descricao" /></td>
                                            <td><input class="form-control rounded-3" name="Movimentacoes[${indice}].Valor" /></td>
                                            <td>
                                                <select class="form-control rounded-3 tipo-field" name="Movimentacoes[${indice}].Tipo">
                                                    ${tiposHtml}
                                                </select>
                                            </td>
                                            <td>
                                                <select class="form-control rounded-3 categoria-select" name="Movimentacoes[${indice}].Categoria.Id">
                                                    ${optionsHtml}
                                                </select>
                                                <input type="hidden" name="Movimentacoes[${indice}].Categoria.Nome" class="categoria-nome-hidden" value="" /> @* Valor inicial vazio para novas linhas *@
                                            </td>
                                            <td><input class="form-control rounded-3" type="date" name="Movimentacoes[${indice}].DataMovimentacao" value="${new Date().toISOString().slice(0, 10)}" /></td>
                                            <td><button type="button" class="btn btn-outline-danger btn-sm" onclick="removerLinha(this)">Remover</button></td>
                                        </tr>
                                    `;

            tbody.append(novaLinha);

            indice++;
            totalPaginas = Math.ceil($('.movimentacao-row').length / registrosPorPagina);
            paginaAtual = totalPaginas;
            atualizarPaginacao();
            tbody.find('tr:last-child td:first-child input').focus();
        }

        // Funções de paginação e filtro (atualizadas para usar o Trim no termo de busca)
        function atualizarPaginacao() {
            aplicarFiltros();
            const linhasFiltradas = $(".movimentacao-row.filtrado");
            const totalRegistros = linhasFiltradas.length;

            totalPaginas = Math.ceil(totalRegistros / registrosPorPagina);
            if (totalPaginas === 0) totalPaginas = 1;

            if (paginaAtual > totalPaginas) {
                paginaAtual = totalPaginas;
            } else if (paginaAtual < 1 && totalRegistros > 0) {
                paginaAtual = 1;
            }

            $(".movimentacao-row").hide();

            const inicio = (paginaAtual - 1) * registrosPorPagina;
            const fim = inicio + registrosPorPagina;

            linhasFiltradas.slice(inicio, fim).show();

            $("#total-registros").text(totalRegistros);
            $("#inicio-registros").text(totalRegistros > 0 ? inicio + 1 : 0);
            $("#fim-registros").text(Math.min(fim, totalRegistros));

            $("#btn-primeira, #btn-anterior").toggleClass("disabled", paginaAtual === 1);
            $("#btn-proxima, #btn-ultima").toggleClass("disabled", paginaAtual === totalPaginas);

            atualizarNumerosPagina();
        }

        function aplicarFiltros() {
            const termoBusca = $("#searchInput").val().toLowerCase().trim(); // <-- Adicionado .trim() aqui
            const tipoFiltro = $("#filterTipo").val();

            $(".movimentacao-row").removeClass("filtrado");

            $(".movimentacao-row").each(function () {
                const linha = $(this);
                let mostrar = true;

                if (termoBusca) {
                    const descricao = linha.find('input[name$="Descricao"]').val().toLowerCase();
                    // Garanta que o nome da categoria vindo do hidden field também seja trimado para a busca
                    const categoriaNome = linha.find('.categoria-nome-hidden').val() ? linha.find('.categoria-nome-hidden').val().toLowerCase().trim() : ''; // <--- Adicionado .trim() aqui e verificação de null
                    const valor = linha.find('input[name$="Valor"]').val().toLowerCase();
                    const data = linha.find('input[name$="DataMovimentacao"]').val().toLowerCase();

                    if (!(descricao.includes(termoBusca) || categoriaNome.includes(termoBusca) || valor.includes(termoBusca) || data.includes(termoBusca))) {
                        mostrar = false;
                    }
                }

                if (tipoFiltro && mostrar) {
                    const tipoValor = linha.find(".tipo-field").val();
                    if (tipoValor !== tipoFiltro) {
                        mostrar = false;
                    }
                }

                if (mostrar) {
                    linha.addClass("filtrado");
                }
            });
        }

        function atualizarNumerosPagina() {
            $(".page-item:not(#btn-primeira):not(#btn-anterior):not(#btn-proxima):not(#btn-ultima)").remove();

            if (totalPaginas <= 1) {
                const pageItem = $(`<li class="page-item active"><a class="page-link" href="#">1</a></li>`);
                pageItem.insertBefore($("#btn-proxima"));
                return;
            }

            let inicioRange = Math.max(1, paginaAtual - 2);
            let fimRange = Math.min(totalPaginas, inicioRange + 4);

            if (fimRange - inicioRange < 4 && totalPaginas > 4) {
                inicioRange = Math.max(1, fimRange - 4);
            }

            for (let i = inicioRange; i <= fimRange; i++) {
                const active = i === paginaAtual ? "active" : "";
                const pageItem = $(`<li class="page-item ${active}"><a class="page-link" href="#">${i}</a></li>`);

                pageItem.insertBefore($("#btn-proxima"));

                pageItem.click(function (e) {
                    e.preventDefault();
                    paginaAtual = i;
                    atualizarPaginacao();
                });
            }
        }

        // Funções de validação de formulário (mantidas as validações atuais)
        function validarFormulario() {
            let isValido = true;
            let mensagensErro = [];

            $(".alert-validation").remove();

            $('.movimentacao-row').each(function (index) {
                const row = $(this);
                const descricaoInput = row.find('input[name$="Descricao"]');
                const valorInput = row.find('input[name$="Valor"]');
                const tipoSelect = row.find('select[name$="Tipo"]');
                const categoriaIdSelect = row.find('select[name$="Categoria.Id"]');
                const categoriaNomeHidden = row.find('input[name$="Categoria.Nome"]');
                const dataInput = row.find('input[name$="DataMovimentacao"]');

                const descricao = descricaoInput.val();
                const valor = valorInput.val();
                const tipo = tipoSelect.val();
                const categoriaId = categoriaIdSelect.val();
                const categoriaNome = categoriaNomeHidden.val(); // <--- O valor aqui já virá trimado do change event
                const data = dataInput.val();

                let linhaTemErro = false;

                descricaoInput.removeClass('is-invalid');
                valorInput.removeClass('is-invalid');
                tipoSelect.removeClass('is-invalid');
                categoriaIdSelect.removeClass('is-invalid');
                dataInput.removeClass('is-invalid');

                if (!descricao || descricao.trim() === '') {
                    isValido = false;
                    linhaTemErro = true;
                    descricaoInput.addClass('is-invalid');
                    mensagensErro.push(`Linha ${index + 1}: Descrição é obrigatória.`);
                }

                const parsedValor = parseFloat(valor.replace(',', '.'));
                if (!valor || valor.trim() === '' || isNaN(parsedValor)) {
                    isValido = false;
                    linhaTemErro = true;
                    valorInput.addClass('is-invalid');
                    mensagensErro.push(`Linha ${index + 1}: Valor é obrigatório e deve ser um número.`);
                }

                if (!tipo || tipo === '' || tipo === 'Selecione o tipo') {
                    isValido = false;
                    linhaTemErro = true;
                    tipoSelect.addClass('is-invalid');
                    mensagensErro.push(`Linha ${index + 1}: Tipo é obrigatório.`);
                }

                // A validação agora confia que categoriaNomeHidden.val() já está trimado.
                // Mas, por segurança, podemos colocar o .trim() aqui também.
                if (!categoriaId || categoriaId === '' || !categoriaNome || categoriaNome.trim() === '') { // <--- Adicionado .trim() aqui para segurança
                    isValido = false;
                    linhaTemErro = true;
                    categoriaIdSelect.addClass('is-invalid');
                    mensagensErro.push(`Linha ${index + 1}: Categoria é obrigatória e deve ser selecionada.`);
                }

                if (!data || data.trim() === '') {
                    isValido = false;
                    linhaTemErro = true;
                    dataInput.addClass('is-invalid');
                    mensagensErro.push(`Linha ${index + 1}: Data é obrigatória.`);
                }

                if (linhaTemErro) {
                    row.show();
                }
            });

            if (!isValido) {
                const alertHtml = `
                                        <div class="alert alert-danger alert-validation alert-dismissible fade show mt-3" role="alert">
                                            <strong>Atenção!</strong> Por favor, corrija os seguintes erros:
                                            <ul>
                                                ${mensagensErro.map(msg => `<li>${msg}</li>`).join('')}
                                            </ul>
                                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                        </div>
                                    `;

                $('.editar_extrato form').prepend(alertHtml);
                $('html, body').animate({ scrollTop: 0 }, 'slow');
            }

            return isValido;
        }

        $('form').on('submit', function (event) {
            if (!validarFormulario()) {
                event.preventDefault();
                return false;
            }
            return true;
        });

    </script>
}